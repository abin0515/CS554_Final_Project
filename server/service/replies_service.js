import { ObjectId } from 'mongodb';
// import { posts, replys } from '../config/mongoCollections.js'; // No longer needed directly
// import * as postService from './post_service.js'; // Likely no longer needed if not using other post services

import {
    createReplyInDB,
    getReplyByIdFromDB,
    incrementReplyCountInDB,
    getRepliesByPostIdFromDB
} from '../data/replies.js';
import {
    getPostByIdFromDB,
    incrementPostReplyCountInDB
} from '../data/posts.js';

/**
 * Creates a new reply for a post.
 * @param {string} postId - The ID of the post being replied to.
 * @param {string} userId - The ID of the user creating the reply.
 * @param {string} content - The content of the reply.
 * @param {string|null} targetUserId - The ID of the user being replied to (optional).
 * @param {string|null} targetReplyId - The ID of the reply being replied to (optional).
 * @param {boolean} anonymity - Whether the reply is anonymous.
 * @returns {object} The newly created reply document.
 */
const createReply = async (
    post_id,
    user_id,
    content,
    target_user_id, // ID of the reply being replied to (optional)
    target_reply_id,  // ID of the user being replied to (optional)
    reply_times,
    liked_times,
    anonymity = false // Default to not anonymous
) => {
   
    // Check if the post exists using the data function
    const postExists = await getPostByIdFromDB(post_id);
    if (!postExists) {
        throw new Error('Post not found.'); // Or throw a specific error type
    }

   
    
    // TODO: Add check for targetUserId existence if necessary (requires a user data function)
    
    // Prepare reply data for insertion (ObjectIds handled in data layer if needed)
    const newReplyData = {
        // _id will be generated by MongoDB or the data function
        post_id: new ObjectId(post_id), // Keep as ObjectId for DB
        user_id: user_id,
        content: content,
        target_user_id: target_user_id ? new ObjectId(parentReplyId) : null,
        target_reply_id: target_reply_id ? new ObjectId(targetUserId) : null,
        reply_times: 0,
        liked_times: 0,
        anonymity: anonymity,
        create_time: new Date(),
        update_time: new Date()
    };

    // Create reply using the data function
    const addedReply = await createReplyInDB(newReplyData);
    if (!addedReply) {
        // createReplyInDB throws on failure, but good practice to check
        throw new Error('Could not add reply via data function.'); 
    }

    // --- Update Counts (Post-Reply Creation) ---
    try {
        // Increment post reply count
        await incrementPostReplyCountInDB(post_id);

    
    } catch (updateError) {
        // Log this error, but the reply creation itself was successful
        // Consider a more robust error handling/logging strategy
        console.error(`Failed to update reply counts for post ${post_id} :`, updateError);
    }
    // --- End Update Counts ---

    return addedReply; // Return the reply object (with string IDs from getReplyByIdFromDB)
};

/**
 * Gets a single reply by its ID.
 * @param {string} replyId - The ID of the reply.
 * @returns {object} The reply document.
 */
export async function getReplyById(replyId) {
    replyId = validation.checkId(replyId, 'Reply ID'); // Validate ID at service layer
    const reply = await getReplyByIdFromDB(replyId); // Call data layer function
    if (!reply) {
        throw new Error('Reply not found.'); // Service layer handles 'not found'
    }
    return reply;
}

/**
 * Gets all replies associated with a specific post ID.
 * @param {string} postId - The ID of the post.
 * @returns {Promise<Array<object>>} An array of reply objects.
 */
export async function getRepliesByPostId(postId) {
    // Service level validation
    // Optional: Could add a check here to ensure the post itself exists using getPostByIdFromDB
    // const postExists = await getPostByIdFromDB(postId);
    // if (!postExists) {
    //     throw new Error('Post not found when fetching replies.');
    // }
    const replies = await getRepliesByPostIdFromDB(postId);
    return replies; // Return the array (could be empty)
}

// Add other reply-related service functions here (e.g., deleteReply, etc.) 
// These should also call corresponding data layer functions

export default {
    createReply,
    getReplyById,
    getRepliesByPostId // Export the new service function
}; 